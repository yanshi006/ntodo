[{"C:\\Users\\s_yanshi\\Desktop\\ntodo\\src\\App.jsx":"1","C:\\Users\\s_yanshi\\Desktop\\ntodo\\src\\pages\\Todo\\index.jsx":"2","C:\\Users\\s_yanshi\\Desktop\\ntodo\\src\\index.js":"3"},{"size":4789,"mtime":1611224670897,"results":"4","hashOfConfig":"5"},{"size":542,"mtime":1611148890663,"results":"6","hashOfConfig":"5"},{"size":659,"mtime":1611201062626,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1h0pv4s",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\s_yanshi\\Desktop\\ntodo\\src\\App.jsx",["15","16","17"],"import React, { useEffect, useState } from \"react\";\r\nimport './App.css';\r\nimport Todo from \"./pages/Todo\";\r\nimport styled from \"styled-components\";\r\nimport firebase from \"firebase\";\r\nimport \"firebase/firestore\";\r\n\r\nconst App = () => {\r\n\r\n  const [input, setInput] = useState('');\r\n  const [todoList, setTodoList] = useState([]);\r\n  //完了済みのリスト\r\n  const [finishedList, setFinishedList] = useState([]);\r\n  //Loadingを判定する変数\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  // 未完了のTodoが変化したかを監視する変数\r\n  const [isChangedTodo, setIsChangedTodo] = useState(false);\r\n  // 完了済みのTodoが変化したかを監視する変数\r\n  const [isChangedFinished, setIsChangedFinished] = useState(false);\r\n\r\n  //これはデータベース\r\n  const db = firebase.firestore();\r\n\r\n  //firebaseからデータを取得してくるので、useEffectを使用する。\r\n  // 一番最初にfirebaseからデータを取得してきて、stateに入れる。\r\n  useEffect(() => {\r\n    (async () => {\r\n      const resTodo = await db.collection('todoList').doc('todo').get();\r\n      //stateに入れている\r\n      setTodoList(resTodo.data().tasks);\r\n      const resFinishedTodo = await db.collection('todoList').doc('finishedTodo').get();\r\n      setFinishedList(resFinishedTodo.data().tasks);\r\n    })()//<-最後のこれは何なのか\r\n  }, [db])\r\n\r\n  useEffect(() => {\r\n    if (isChangedTodo) {\r\n      (async () => {\r\n        // 通信をするのでLoadingをtrue\r\n        //なんでtrueにするのか分からない\r\n        setIsLoading(true);\r\n        const docRef = await db.collection('todoList').doc('todo');\r\n        docRef.update({ tasks: todoList });\r\n        // Loading終了\r\n        setIsLoading(false);\r\n      })()//<-最後のこれは何なのか\r\n    }\r\n  }, [todoList, isChangedTodo, db])\r\n\r\n  useEffect(() => {\r\n    if (isChangedFinished) {\r\n      (async () => {\r\n        // 通信をするのでLoadingをtrue\r\n        //なんでtrueにするのか分からない\r\n        setIsLoading(true);\r\n        const docRef = await db.collection('todoList').doc('finishedTodo');\r\n        docRef.update({ tasks: finishedList });\r\n        // Loading終了\r\n        setIsLoading(false);\r\n      })()\r\n    }\r\n  }, [db, finishedList, isChangedFinished])\r\n\r\n  const addTodo = () => {\r\n    if (!!input) {\r\n      setTodoList([...todoList, input]);\r\n      setInput('');\r\n    }\r\n  }\r\n  //この関数は、未完了リストで削除ボタンが押した時のリスト\r\n  const deleteTodo = (index) => {\r\n    setTodoList(\r\n      // _ これはmapメッソドのkeyに何か関係があるのかもしれない。これがなかったら削除ボタンを押しても消えなかった。\r\n      todoList.filter((_, idx) => idx !== index)\r\n    )\r\n  }\r\n  //この関数は、完了済みリストで戻すボタンが押ししたときのリスト\r\n  const deleteFinishTodo = (index) => {\r\n    setFinishedList(\r\n      finishedList.filter((_, idx) => idx !== index)\r\n    )\r\n  }\r\n  //この関数は、未完了リストで完了済みにするボタンを押した時の完了済みリストのリスト\r\n  const finishTodo = (index) => {\r\n    deleteTodo(index);\r\n    setFinishedList(\r\n      //完了済みリストの新しいリスト\r\n      [...finishedList, todoList.find((_, idx) => idx === index)]\r\n    )\r\n  }\r\n  //この関数は、完了済みリストで戻るボタンを押した時の未完了リストのリスト\r\n  const reopenTodo = (index) => {\r\n    deleteFinishTodo();\r\n    setTodoList(\r\n      //未完了リストの新しいリスト\r\n      [...todoList, finishedList.find((_, idx) => idx === index)]\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Title>Todo App</Title>\r\n      <input type=\"text\" value={input} onChange={(e) => setInput(e.target.value)} />\r\n      <button onClick={() => addTodo()}>追加</button>\r\n      <TodoContainer>\r\n        <SubContainer>\r\n          <SubTitle>未完了</SubTitle>\r\n          <Todo todoList={todoList} deleteTodo={deleteTodo} changeTodoStatus={finishTodo} type='todo' />\r\n        </SubContainer>\r\n        <SubContainer>\r\n          <SubTitle>完了済み</SubTitle>\r\n          <Todo todoList={finishedList} deleteTodo={deleteFinishTodo} changeTodoStatus={reopenTodo} type='done' />\r\n        </SubContainer>\r\n      </TodoContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 26px;\r\n  color: #0097a7;\r\n  letter-spacing: 2.8px;\r\n  font-weight: 200;\r\n`\r\nconst SubTitle = styled.p`\r\n  font-size: 22px;\r\n  color: #5c5c5c;\r\n`\r\nconst SubContainer = styled.div`\r\n  width: 400px;\r\n`\r\nconst TodoContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  justify-content: space-between;\r\n`","C:\\Users\\s_yanshi\\Desktop\\ntodo\\src\\pages\\Todo\\index.jsx",[],"C:\\Users\\s_yanshi\\Desktop\\ntodo\\src\\index.js",[],{"ruleId":"18","severity":1,"message":"19","line":15,"column":10,"nodeType":"20","messageId":"21","endLine":15,"endColumn":19},{"ruleId":"18","severity":1,"message":"22","line":17,"column":25,"nodeType":"20","messageId":"21","endLine":17,"endColumn":41},{"ruleId":"18","severity":1,"message":"23","line":19,"column":29,"nodeType":"20","messageId":"21","endLine":19,"endColumn":49},"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","'setIsChangedTodo' is assigned a value but never used.","'setIsChangedFinished' is assigned a value but never used."]